ifndef WIND_GNU_PATH
$(error WIND_GNU_PATH is not set)
endif

CROSS_COMPILE_TARGET_arm = arm-wrs-vxworks
CROSS_COMPILE_SUFFIX_arm = arm


CROSS_COMPILE_TARGET_x86 = i586-wrs-vxworks
CROSS_COMPILE_SUFFIX_x86 = pentium

CROSS_COMPILE = $(WIND_GNU_PATH)/x86-linux2/bin/
CROSS_COMPILE_SUFFIX = $(CROSS_COMPILE_SUFFIX_$(ARCH))

# only needed for gen_idt, so other architectures than x86 are ignored
OUTPUT_FORMAT_x86 = elf32-i386-vxworks
OUTPUT_FORMAT = $(OUTPUT_FORMAT_$(ARCH))

TOOLCHAIN_LIBS = gcc

LIB_INCLUDE_DIR_ARCH = $(WIND_GNU_PATH)/lib/gcc/$(CROSS_COMPILE_TARGET_$(ARCH))/4.8.1
LIB_INCLUDE_DIR_SUBARCH_arm = /t7mt
LIB_INCLUDE_DIR_SUBARCH_x86 =
LIB_INCLUDE_DIR += -L $(LIB_INCLUDE_DIR_ARCH)$(LIB_INCLUDE_DIR_SUBARCH_$(ARCH))

export CROSS_COMPILE TOOLCHAIN_LIBS LIB_INCLUDE_DIR

AS      = $(CC)
LD      = $(CROSS_COMPILE)ld$(CROSS_COMPILE_SUFFIX)
CC      = $(CROSS_COMPILE)cc$(CROSS_COMPILE_SUFFIX)
CPP     = $(CROSS_COMPILE)cpp$(CROSS_COMPILE_SUFFIX)
AR      = $(CROSS_COMPILE)ar$(CROSS_COMPILE_SUFFIX)
NM      = $(CROSS_COMPILE)nm$(CROSS_COMPILE_SUFFIX)
STRIP       = $(CROSS_COMPILE)strip$(CROSS_COMPILE_SUFFIX)
OBJCOPY     = $(CROSS_COMPILE)objcopy$(CROSS_COMPILE_SUFFIX)
OBJDUMP     = $(CROSS_COMPILE)objdump$(CROSS_COMPILE_SUFFIX)

export AS LD CC CPP AR NM STRIP OBJCOPY OBJDUMP
